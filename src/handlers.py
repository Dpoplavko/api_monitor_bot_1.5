# src/handlers.py
# –§–∞–π–ª –∑ –æ–±—Ä–æ–±–Ω–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

import logging
import json
from aiogram import Router, Bot, F
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import CommandStart, Command, StateFilter, BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config import settings
from database import (add_api_to_db, get_all_apis, get_api_by_id,
                      toggle_api_monitoring, delete_api_from_db, get_stats_for_period, get_history_for_period)
from scheduler import add_job_to_scheduler, remove_job_from_scheduler
from utils import (format_api_status, parse_add_command, format_statistics_report, 
                   generate_statistics_chart)

logger = logging.getLogger(__name__)
router = Router()

class AdminFilter(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id == settings.ADMIN_USER_ID

class AddFullApiFSM(StatesGroup):
    waiting_for_name = State()
    waiting_for_api_data = State()
    waiting_for_headers = State()
    waiting_for_body = State()

@router.message(AdminFilter(), CommandStart())
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É API. \n"
                         "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")

@router.message(AdminFilter(), Command("help"))
async def cmd_help(message: Message):
    help_text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n\n"
        "<code>/add_full</code> - –ü–æ–∫—Ä–æ–∫–æ–≤–æ –¥–æ–¥–∞—Ç–∏ API –∑ —ñ–º–µ–Ω–µ–º, –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ç–∞ —Ç—ñ–ª–æ–º –∑–∞–ø–∏—Ç—É.\n\n"
        "<code>/list_apis</code> - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ API, —â–æ –º–æ–Ω—ñ—Ç–æ—Ä—è—Ç—å—Å—è.\n\n"
        "<code>/status &lt;id&gt;</code> - –î–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ API.\n\n"
        "<code>/stats &lt;id&gt; [–ø–µ—Ä—ñ–æ–¥]</code> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫ –∑–∞ –ø–µ—Ä—ñ–æ–¥.\n"
        "   - `–ø–µ—Ä—ñ–æ–¥`: 1h, 6h, 12h, 24h, 7d, 30d (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 24h).\n\n"
        "<code>/pause_api &lt;id&gt;</code> - –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥.\n\n"
        "<code>/resume_api &lt;id&gt;</code> - –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥.\n\n"
        "<code>/delete_api &lt;id&gt;</code> - –í–∏–¥–∞–ª–∏—Ç–∏ API –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É."
    )
    await message.answer(help_text)

@router.message(AdminFilter(), Command("add_full"))
async def cmd_add_full(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>–ö—Ä–æ–∫ 1/4:</b> –í–≤–µ–¥—ñ—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è –¥–ª—è —Ü—å–æ–≥–æ API (–Ω–∞–ø—Ä., '–ü—Ä–æ–¥–∞–∫—à–Ω API –ø–ª–∞—Ç–µ–∂—ñ–≤')."
    )
    await state.set_state(AddFullApiFSM.waiting_for_name)

@router.message(AdminFilter(), AddFullApiFSM.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(
        "<b>–ö—Ä–æ–∫ 2/4:</b> –ù–∞–¥—ñ—à–ª—ñ—Ç—å –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ API —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "<code>url [method] [status] [timeout] [interval] [json_keys]</code>\n\n"
        "<i>–ü—Ä–∏–∫–ª–∞–¥:</i> <code>[https://api.example.com](https://api.example.com) POST 201 10 60 status,data</code>"
    )
    await state.set_state(AddFullApiFSM.waiting_for_api_data)

@router.message(AdminFilter(), AddFullApiFSM.waiting_for_api_data)
async def process_full_api_data(message: Message, state: FSMContext):
    try:
        api_data = parse_add_command(message.text)
        await state.update_data(api_data=api_data)
        await message.answer(
            "<b>–ö—Ä–æ–∫ 3/4:</b> –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ (headers) —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON.\n\n"
            '–Ø–∫—â–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å <code>-</code> –∞–±–æ <code>skip</code>.'
        )
        await state.set_state(AddFullApiFSM.waiting_for_headers)
    except ValueError as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –≤ –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.\n–î–µ—Ç–∞–ª—ñ: {e}")

@router.message(AdminFilter(), AddFullApiFSM.waiting_for_headers)
async def process_full_headers(message: Message, state: FSMContext):
    headers = None
    if message.text.lower() not in ['-', 'skip']:
        try:
            headers = json.loads(message.text)
            if not isinstance(headers, dict): raise json.JSONDecodeError("JSON object expected", "", 0)
        except json.JSONDecodeError:
            await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å <code>-</code>.")
            return

    await state.update_data(headers=headers)
    await message.answer(
        "<b>–ö—Ä–æ–∫ 4/4:</b> –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É (request body) —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON.\n\n"
        "–Ø–∫—â–æ —Ç—ñ–ª–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ, –Ω–∞–ø–∏—à—ñ—Ç—å <code>-</code> –∞–±–æ <code>skip</code>."
    )
    await state.set_state(AddFullApiFSM.waiting_for_body)

@router.message(AdminFilter(), AddFullApiFSM.waiting_for_body)
async def process_full_body_and_save(message: Message, state: FSMContext, bot: Bot, scheduler: AsyncIOScheduler):
    body = None
    if message.text.lower() not in ['-', 'skip']:
        try:
            body = json.loads(message.text)
        except json.JSONDecodeError:
            await message.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç JSON. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å <code>-</code>.")
            return

    user_data = await state.get_data()
    api_data = user_data.get("api_data", {})
    api_data.update({
        'name': user_data.get('name'),
        'headers': user_data.get('headers'),
        'request_body': body
    })

    api = await add_api_to_db(api_data)
    await add_job_to_scheduler(scheduler, bot, api)
    await state.clear()
    await message.answer(f"‚úÖ API '<b>{api.name}</b>' (ID: {api.id}) —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.")

@router.message(AdminFilter(), Command("stats"))
async def cmd_stats(message: Message):
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer("–í–∫–∞–∂—ñ—Ç—å ID. –ü—Ä–∏–∫–ª–∞–¥: <code>/stats 1 24h</code>")
        return
    try:
        api_id = int(parts[1])
        period = parts[2] if len(parts) > 2 else "24h"
    except ValueError:
        await message.answer("ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        return
        
    api = await get_api_by_id(api_id)
    if not api:
        await message.answer(f"API –∑ ID {api_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä—É—é –∑–≤—ñ—Ç —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫...")

    stats_data = await get_stats_for_period(api_id, period)
    if not stats_data:
        await message.answer(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –ø–µ—Ä—ñ–æ–¥: {period}. –î–æ—Å—Ç—É–ø–Ω—ñ: 1h, 6h, 12h, 24h, 7d, 30d.")
        return
    
    history_data = await get_history_for_period(api_id, period)
    chart_buffer = await generate_statistics_chart(
        history_data, api.name, period, stats_data.get("avg_response_time_ms", 0)
    )
    
    report_caption = format_statistics_report(api.name, stats_data)
    
    await message.reply_photo(
        photo=BufferedInputFile(chart_buffer.read(), filename=f"stats_{api_id}_{period}.png"),
        caption=report_caption
    )

@router.message(AdminFilter(), Command("list_apis"))
async def cmd_list_apis(message: Message):
    apis = await get_all_apis()
    if not apis:
        await message.answer("–°–ø–∏—Å–æ–∫ API –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    response_text = "<b>API, —â–æ –º–æ–Ω—ñ—Ç–æ—Ä—è—Ç—å—Å—è:</b>\n\n"
    for api in apis:
        status_icon = "üü¢" if api.is_up else "üî¥"
        active_icon = "‚ñ∂Ô∏è" if api.is_active else "‚è∏Ô∏è"
        response_text += f"{active_icon} {status_icon} <b>{api.name}</b> (ID: <code>{api.id}</code>)\n"
    await message.answer(response_text)

@router.message(AdminFilter(), Command("status"))
async def cmd_status(message: Message):
    try:
        api_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("–í–∫–∞–∂—ñ—Ç—å ID. –ü—Ä–∏–∫–ª–∞–¥: <code>/status 1</code>")
        return
    api = await get_api_by_id(api_id)
    if not api:
        await message.answer(f"API –∑ ID {api_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    await message.answer(format_api_status(api))

async def _toggle_api(message: Message, scheduler: AsyncIOScheduler, is_active: bool):
    command_name = "resume_api" if is_active else "pause_api"
    try:
        api_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer(f"–í–∫–∞–∂—ñ—Ç—å ID. –ü—Ä–∏–∫–ª–∞–¥: <code>/{command_name} 1</code>")
        return

    api = await toggle_api_monitoring(api_id, is_active)
    if not api:
        await message.answer(f"API –∑ ID {api_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    if is_active:
        await add_job_to_scheduler(scheduler, message.bot, api)
        await message.answer(f"‚ñ∂Ô∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ API '<b>{api.name}</b>' (ID: {api.id}) –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        remove_job_from_scheduler(scheduler, api_id)
        await message.answer(f"‚è∏Ô∏è –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ API '<b>{api.name}</b>' (ID: {api.id}) –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ.")

@router.message(AdminFilter(), Command("pause_api"))
async def cmd_pause_api(message: Message, scheduler: AsyncIOScheduler):
    await _toggle_api(message, scheduler, is_active=False)

@router.message(AdminFilter(), Command("resume_api"))
async def cmd_resume_api(message: Message, scheduler: AsyncIOScheduler):
    await _toggle_api(message, scheduler, is_active=True)

@router.message(AdminFilter(), Command("delete_api"))
async def cmd_delete_api(message: Message, scheduler: AsyncIOScheduler):
    try:
        api_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("–í–∫–∞–∂—ñ—Ç—å ID. –ü—Ä–∏–∫–ª–∞–¥: <code>/delete_api 1</code>")
        return
    
    api = await get_api_by_id(api_id)
    if not api:
        await message.answer(f"API –∑ ID {api_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    api_name = api.name
    deleted = await delete_api_from_db(api_id)
    if deleted:
        remove_job_from_scheduler(scheduler, api_id)
        await message.answer(f"üóëÔ∏è API '<b>{api_name}</b>' (ID: {api_id}) –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ API –∑ ID {api_id}.")

@router.message(AdminFilter(), StateFilter(None))
async def unknown_command(message: Message):
    await message.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")