# src/utils.py
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥, —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)

import datetime
import json
import io
from typing import Dict, Optional, List, Any

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Agg-–±–µ–∫–µ–Ω–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥—Ä–∞—Ñ—ñ–∫—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ –±–µ–∑ GUI
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.ticker import ScalarFormatter, NullFormatter

def parse_period_to_timedelta(period_str: str) -> Optional[datetime.datetime]:
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î —Ä—è–¥–æ–∫ –ø–µ—Ä—ñ–æ–¥—É (1h, 7d) –≤ –æ–±'—î–∫—Ç datetime."""
    now = datetime.datetime.utcnow()
    period_str = period_str.lower()
    
    try:
        if period_str.endswith('h'):
            hours = int(period_str[:-1])
            return now - datetime.timedelta(hours=hours)
        elif period_str.endswith('d'):
            days = int(period_str[:-1])
            return now - datetime.timedelta(days=days)
    except (ValueError, IndexError):
        return None
    return None

def format_timedelta(td: datetime.timedelta) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î timedelta –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ä—è–¥–æ–∫ (2 –≥–æ–¥ 15 —Ö–≤ 30 —Å–µ–∫)."""
    total_seconds = int(td.total_seconds())
    days, remainder = divmod(total_seconds, 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    parts = []
    if days > 0: parts.append(f"{days} –¥–Ω")
    if hours > 0: parts.append(f"{hours} –≥–æ–¥")
    if minutes > 0: parts.append(f"{minutes} —Ö–≤")
    if seconds > 0 or not parts: parts.append(f"{seconds} —Å–µ–∫")
        
    return " ".join(parts) if parts else "0 —Å–µ–∫"

def get_period_text(period_str: str) -> str:
    period_map = {
        "1h": "–æ—Å—Ç–∞–Ω–Ω—é –≥–æ–¥–∏–Ω—É", "6h": "–æ—Å—Ç–∞–Ω–Ω—ñ 6 –≥–æ–¥–∏–Ω", "12h": "–æ—Å—Ç–∞–Ω–Ω—ñ 12 –≥–æ–¥–∏–Ω",
        "24h": "–æ—Å—Ç–∞–Ω–Ω—ñ 24 –≥–æ–¥–∏–Ω–∏", "7d": "–æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤", "30d": "–æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤"
    }
    return period_map.get(period_str, period_str)

async def generate_statistics_chart(history: List["CheckHistory"], api_name: str, period: str, avg_response_time: float) -> io.BytesIO:
    """–ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞—Ñ—ñ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –π–æ–≥–æ —è–∫ –±–∞–π—Ç–æ–≤–∏–π –±—É—Ñ–µ—Ä."""
    if not history:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π –≥—Ä–∞—Ñ—ñ–∫ –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º, —è–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö
        fig, ax = plt.subplots(figsize=(12, 6.5))
        ax.text(0.5, 0.5, '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥', 
                horizontalalignment='center', verticalalignment='center', 
                transform=ax.transAxes, fontsize=14, color='gray')
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=100)
        buf.seek(0)
        plt.close(fig)
        return buf

    timestamps = [h.timestamp for h in history]
    response_times = [h.response_time_ms if h.response_time_ms > 0 else 1 for h in history] # –ó–∞–º—ñ–Ω—é—î–º–æ 0 –Ω–∞ 1 –¥–ª—è –ª–æ–≥. —à–∫–∞–ª–∏
    
    ok_checks = [(h.timestamp, h.response_time_ms) for h in history if h.is_ok and h.response_time_ms > 0]
    fail_checks = [(h.timestamp, h.response_time_ms) for h in history if not h.is_ok and h.response_time_ms > 0]

    plt.style.use('seaborn-v0_8-darkgrid')
    fig, ax = plt.subplots(figsize=(12, 6.5))

    # Plot main response time line
    ax.plot(timestamps, response_times, label='–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–º—Å)', color='dodgerblue', zorder=2, linewidth=1.5, alpha=0.7)

    # Plot success and failure points
    if ok_checks:
        ok_ts, ok_rt = zip(*ok_checks)
        ax.scatter(ok_ts, ok_rt, color='limegreen', label='–£—Å–ø—ñ—Ö', s=25, zorder=3, alpha=0.8)
    if fail_checks:
        fail_ts, fail_rt = zip(*fail_checks)
        ax.scatter(fail_ts, fail_rt, color='red', label='–ó–±—ñ–π', s=50, zorder=4, marker='X')
    
    # Plot average response time line
    if avg_response_time:
        ax.axhline(y=avg_response_time, color='darkorange', linestyle='--', linewidth=1.5, label=f'–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å ({int(avg_response_time)} –º—Å)')

    # Formatting
    ax.set_title(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è '{api_name}'\n –∑–∞ {get_period_text(period)}", fontsize=16, pad=20)
    ax.set_xlabel("–ß–∞—Å", fontsize=12)
    ax.set_ylabel("–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–º—Å)", fontsize=12)
    ax.legend(loc='upper left')
    ax.set_yscale('log') # Log scale is better for visualizing response time spikes
    
    # --- –ü–û–ö–†–ê–©–ï–ù–ù–Ø ---
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–≤–∏—á–∞–π–Ω—ñ —á–∏—Å–ª–∞ –∑–∞–º—ñ—Å—Ç—å —Å—Ç–µ–ø–µ–Ω—ñ–≤ –¥–ª—è –æ—Å—ñ Y
    ax.yaxis.set_major_formatter(ScalarFormatter())
    ax.yaxis.set_minor_formatter(NullFormatter())
    ax.tick_params(axis='y', which='minor', bottom=False)
    # –î–æ–¥–∞—î–º–æ –±—ñ–ª—å—à–µ –ª—ñ–Ω—ñ–π —Å—ñ—Ç–∫–∏ –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
    ax.grid(True, which='major', linestyle='--', linewidth=0.5)
    ax.grid(True, which='minor', linestyle=':', linewidth=0.3)
    # --- –ö–Ü–ù–ï–¶–¨ –ü–û–ö–†–ê–©–ï–ù–¨ ---

    # Format x-axis dates
    date_format = mdates.DateFormatter('%H:%M\n%d-%m')
    ax.xaxis.set_major_formatter(date_format)
    fig.autofmt_xdate(rotation=0, ha='center')

    fig.tight_layout(pad=2.0)
    
    # Save to buffer
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=100)
    buf.seek(0)
    plt.close(fig)
    
    return buf

def format_statistics_report(api_name: str, stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Å–ª–æ–≤–Ω–∏–∫ –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram."""
    period_text = get_period_text(stats['period'])

    report = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è '{api_name}' –∑–∞ {period_text}</b>\n\n"
        f"  - <b>–ê–ø—Ç–∞–π–º:</b> {stats['uptime_percent']:.2f}%\n"
        f"  - <b>–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:</b> {int(stats['avg_response_time_ms'] or 0)} –º—Å\n"
        f"  - <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞–¥—ñ–Ω—å:</b> {stats['incident_count']}\n"
        f"  - <b>–ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å –ø—Ä–æ—Å—Ç–æ—é:</b> {format_timedelta(stats['total_downtime'])}\n"
        f"  - <b>–°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–∞–¥—ñ–Ω–Ω—è:</b> {format_timedelta(stats['avg_downtime'])}"
    )
    return report

def parse_add_command(text: str) -> Dict:
    parts = text.split()
    if not parts or not parts[0].startswith(('http://', 'https://')):
        raise ValueError("–ö–æ–º–∞–Ω–¥–∞ –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ URL (http:// –∞–±–æ https://)")

    data = {
        "url": parts[0], "method": "GET", "expected_status": 200, "timeout": 10,
        "check_interval": 60, "json_keys": None, "headers": None, "request_body": None,
    }
    
    if len(parts) > 1:
        data["method"] = parts[1].upper()
        if data["method"] not in ["GET", "POST", "PUT", "DELETE", "PATCH"]:
             raise ValueError(f"–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥: {data['method']}")
    if len(parts) > 2: data["expected_status"] = int(parts[2])
    if len(parts) > 3: data["timeout"] = int(parts[3])
    if len(parts) > 4: data["check_interval"] = int(parts[4])
    if len(parts) > 5 and parts[5].lower() != 'none': data["json_keys"] = parts[5]
        
    return data

def format_api_status(api: "MonitoredAPI", update_data: Optional[Dict] = None) -> str:
    is_up = update_data.get('is_up', api.is_up) if update_data else api.is_up
    last_error = update_data.get('last_error', api.last_error) if update_data else api.last_error
    
    status_icon = "üü¢ <b>UP</b>" if is_up else "üî¥ <b>DOWN</b>"
    active_icon = "‚ñ∂Ô∏è –ê–∫—Ç–∏–≤–Ω–∏–π" if api.is_active else "‚è∏Ô∏è –ù–∞ –ø–∞—É–∑—ñ"

    text = (
        f"<b>–Ü–º'—è:</b> {api.name}\n"
        f"<b>ID:</b> <code>{api.id}</code>\n"
        f"<b>URL:</b> <code>{api.url}</code>\n"
        f"<b>–ú–µ—Ç–æ–¥:</b> {api.method}\n"
        f"<b>–°—Ç–∞–Ω:</b> {status_icon}\n"
        f"<b>–ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥:</b> {active_icon}\n"
        f"------------------------------------\n"
        f"<b>–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:</b> {api.last_response_time or 'N/A'} –º—Å\n"
        f"<b>–û—Å—Ç–∞–Ω–Ω—ñ–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥:</b> {api.last_status_code or 'N/A'}\n"
        f"<b>–û—á—ñ–∫—É–≤–∞–Ω–∏–π —Å—Ç–∞—Ç—É—Å:</b> {api.expected_status}\n"
        f"<b>–û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞:</b> {api.last_checked.strftime('%Y-%m-%d %H:%M:%S UTC') if api.last_checked else 'N/A'}\n"
    )
    
    if api.headers:
        headers_str = json.dumps(api.headers, indent=2, ensure_ascii=False)
        text += f"<b>–ó–∞–≥–æ–ª–æ–≤–∫–∏:</b>\n<pre>{headers_str.replace('<', '&lt;')}</pre>\n"

    if api.request_body:
        body_str = json.dumps(api.request_body, indent=2, ensure_ascii=False)
        text += f"<b>–¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É:</b>\n<pre>{body_str.replace('<', '&lt;')}</pre>\n"

    if not is_up and last_error:
        text += f"<b>–ü–æ–º–∏–ª–∫–∞:</b> <pre>{last_error.replace('<', '&lt;')}</pre>"
        
    return text