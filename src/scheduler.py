# src/scheduler.py
# –õ–æ–≥—ñ–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ API —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å

import asyncio
import datetime
import httpx
import logging
import time
import json

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

from config import settings
from database import (MonitoredAPI, update_api_status, get_api_by_id, 
                      log_check_to_history, create_incident, end_incident, get_all_active_apis, get_stats_for_period,
                      get_recent_history_points, save_ml_metric, get_latest_ml_metric, log_anomaly_event, get_last_anomaly_time,
                      get_subscribers_for_api, get_or_create_notification_state, update_down_reminder_time)
from utils import format_api_status, format_timedelta, robust_stats, detect_anomaly

logger = logging.getLogger(__name__)

async def check_api(bot: Bot, api_id: int):
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ API –∑ –ª–æ–≥—ñ–∫–æ—é –ø–æ—Ä–æ–≥—ñ–≤ —Ç–∞ —ñ–Ω—Ü–∏–¥–µ–Ω—Ç—ñ–≤.
    """
    api = await get_api_by_id(api_id)
    if not api or not api.is_active:
        return

    start_time = time.monotonic()
    is_currently_ok = False
    response_time_ms = -1
    status_code = None
    error_str = None
    
    try:
        async with httpx.AsyncClient(timeout=api.timeout, headers=api.headers) as client:
            request_params = {"method": api.method.upper(), "url": api.url}
            if api.request_body:
                request_params["json"] = api.request_body

            # simple retry/backoff
            max_retries = int(getattr(bot.config, 'REQUEST_RETRIES', 1) or 1)
            backoff_base = float(getattr(bot.config, 'REQUEST_BACKOFF', 0.5) or 0.5)
            for attempt in range(max_retries):
                try:
                    response = await client.send(client.build_request(**request_params))
                    break
                except (httpx.TimeoutException, httpx.TransportError) as e:
                    if attempt < max_retries - 1:
                        await asyncio.sleep(backoff_base * (2 ** attempt))
                    else:
                        raise e

            response_time_ms = int((time.monotonic() - start_time) * 1000)
            status_code = response.status_code
            
            if status_code != api.expected_status:
                raise ValueError(f"–û—á—ñ–∫—É–≤–∞–≤—Å—è —Å—Ç–∞—Ç—É—Å {api.expected_status}, –æ—Ç—Ä–∏–º–∞–Ω–æ {status_code}")

            if api.json_keys:
                json_data = response.json()
                missing_keys = [k.strip() for k in api.json_keys.split(',') if k.strip() not in json_data]
                if missing_keys:
                    raise ValueError(f"–£ JSON –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–ª—é—á—ñ: {', '.join(missing_keys)}")

            is_currently_ok = True

    except Exception as e:
        response_time_ms = int((time.monotonic() - start_time) * 1000)
        error_str = str(e)
        logger.warning(f"–ü–ï–†–ï–í–Ü–†–ö–ê –ù–ï–í–î–ê–õ–ê: API '{api.name}' (ID: {api.id}): {error_str}")

    await log_check_to_history(api_id, is_currently_ok, response_time_ms, status_code)
    
    update_data = {
        "last_checked": datetime.datetime.utcnow(),
        "last_response_time": response_time_ms,
        "last_status_code": status_code,
        "last_error": error_str
    }

    # –†–∞–Ω–Ω—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è (ML-–∞–Ω–æ–º–∞–ª—ñ—è) ‚Äî —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ ML —É–≤—ñ–º–∫–Ω–µ–Ω–æ —ñ —î —É—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if settings.ML_ENABLED and response_time_ms >= 0 and is_currently_ok:
        try:
            latest_metrics = await get_latest_ml_metric(api_id)
            if latest_metrics and latest_metrics.ucl_ms:
                is_anom, score = detect_anomaly(response_time_ms, latest_metrics.ucl_ms)
                if is_anom:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ cooldown, —â–æ–± –Ω–µ —Å–ø–∞–º–∏—Ç–∏
                    last_ts = await get_last_anomaly_time(api_id)
                    too_soon = False
                    if last_ts:
                        delta = datetime.datetime.utcnow() - last_ts
                        too_soon = delta.total_seconds() < settings.ANOMALY_COOLDOWN_MINUTES * 60
                    if not too_soon:
                        await log_anomaly_event(api_id, response_time_ms, score, reason="rt>UCL")
                        text_warn = (
                            f"‚ö†Ô∏è <b>–ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø (–∞–Ω–æ–º–∞–ª—ñ—è): {api.name}</b>\n\n"
                            f"–ß–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ {response_time_ms} –º—Å –ø–µ—Ä–µ–≤–∏—â–∏–≤ –ø–æ—Ä—ñ–≥ UCL ~ {latest_metrics.ucl_ms} –º—Å.\n"
                            f"–¶–µ –º–æ–∂–µ —Å–≤—ñ–¥—á–∏—Ç–∏ –ø—Ä–æ –¥–µ–≥—Ä–∞–¥–∞—Ü—ñ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ."
                        )
                        try:
                            for chat_id in await get_subscribers_for_api(api.id):
                                await bot.send_message(chat_id, text_warn)
                        except Exception:
                            pass
        except Exception as _:
            # –ù–µ –ª–∞–º–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –ø–æ—Ç—ñ–∫
            pass
    
    if is_currently_ok:
        update_data["consecutive_failures"] = 0
        update_data["consecutive_successes"] = api.consecutive_successes + 1
        
        if not api.is_up and update_data["consecutive_successes"] >= settings.RECOVERY_THRESHOLD:
            logger.info(f"–í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø: API '{api.name}' (ID: {api.id}) –¥–æ—Å—Ç—É–ø–Ω–µ {settings.RECOVERY_THRESHOLD} —Ä.")
            update_data["is_up"] = True
            
            incident_end_time = datetime.datetime.utcnow()
            await end_incident(api.id, api.incident_start_time, incident_end_time)
            
            downtime = incident_end_time - api.incident_start_time
            requests_during_downtime = api.consecutive_failures + update_data["consecutive_successes"]
            
            recovery_message = (
                f"‚úÖ <b>–í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø: {api.name}</b>\n\n"
                f"–°–µ—Ä–≤—ñ—Å —Å—Ç–∞–±—ñ–ª—å–Ω–æ –ø—Ä–∞—Ü—é—î.\n\n"
                f"<b>–î–µ—Ç–∞–ª—ñ —ñ–Ω—Ü–∏–¥–µ–Ω—Ç—É:</b>\n"
                f"  - –ü–æ—á–∞—Ç–æ–∫: <code>{api.incident_start_time.strftime('%Y-%m-%d %H:%M:%S')}</code>\n"
                f"  - –ö—ñ–Ω–µ—Ü—å: <code>{incident_end_time.strftime('%Y-%m-%d %H:%M:%S')}</code>\n"
                f"  - –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: <b>{format_timedelta(downtime)}</b>\n"
                f"  - –ù–µ–≤–¥–∞–ª–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫: {api.consecutive_failures}"
            )
            # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É—Å—ñ–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º
            try:
                for chat_id in await get_subscribers_for_api(api.id):
                    await bot.send_message(chat_id, recovery_message)
            except Exception:
                pass
            update_data["incident_start_time"] = None
        
    else: # –ù–µ–≤–¥–∞–ª–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
        update_data["consecutive_successes"] = 0
        update_data["consecutive_failures"] = api.consecutive_failures + 1
        
        if api.is_up and update_data["consecutive_failures"] >= settings.FAILURE_THRESHOLD:
            logger.error(f"–ü–ê–î–Ü–ù–ù–Ø: API '{api.name}' (ID: {api.id}) –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î {settings.FAILURE_THRESHOLD} —Ä.")
            update_data["is_up"] = False
            # –ß–∞—Å –ø–æ—á–∞—Ç–∫—É —ñ–Ω—Ü–∏–¥–µ–Ω—Ç—É - —Ü–µ —á–∞—Å –ø–µ—Ä—à–æ—ó –Ω–µ–≤–¥–∞–ª–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            update_data["incident_start_time"] = datetime.datetime.utcnow() - datetime.timedelta(seconds=api.check_interval * (update_data["consecutive_failures"] - 1))
            await create_incident(api.id, update_data["incident_start_time"])
            
            # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É—Å—ñ–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º
            text_down = f"üî¥ <b>–ü–ê–î–Ü–ù–ù–Ø: {api.name}</b>\n\n{format_api_status(api, update_data)}"
            try:
                for chat_id in await get_subscribers_for_api(api.id):
                    await bot.send_message(chat_id=chat_id, text=text_down)
            except Exception:
                pass

    await update_api_status(api.id, update_data)

async def send_daily_summary(bot: Bot):
    """–ù–∞–¥—Å–∏–ª–∞—î —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –≤—Å—ñ–º –∞–∫—Ç–∏–≤–Ω–∏–º –º–æ–Ω—ñ—Ç–æ—Ä–∞–º."""
    logger.info("–ü–æ—á–∏–Ω–∞—é —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É...")
    active_apis = await get_all_active_apis()
    if not active_apis:
        logger.info("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É.")
        return

    summary_header = f"‚òÄÔ∏è <b>–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ {datetime.date.today().strftime('%d-%m-%Y')}</b>\n\n"
    summary_parts = []

    for api in active_apis:
        status_icon = "üü¢" if api.is_up else "üî¥"
        stats = await get_stats_for_period(api.id, "24h")
        
        part = (
            f"<b>{status_icon} {api.name}</b> (ID: {api.id})\n"
            f"  - –ê–ø—Ç–∞–π–º: {stats.get('uptime_percent', 100):.2f}%\n"
            f"  - –ü–∞–¥—ñ–Ω—å: {stats.get('incident_count', 0)}\n"
            f"  - –ß–∞—Å –ø—Ä–æ—Å—Ç–æ—é: {format_timedelta(stats.get('total_downtime', datetime.timedelta()))}\n"
            f"  - –°–µ—Ä. –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {int(stats.get('avg_response_time_ms') or 0)} –º—Å\n"
        )
        summary_parts.append(part)

    full_summary = summary_header + "\n".join(summary_parts)
    
    try:
        # –†–æ–∑—Å–∏–ª–∫–∞ –≤—Å—ñ–º –≥–ª–æ–±–∞–ª—å–Ω–∏–º –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞–º (—Ç–∞ –∞–¥–º—ñ–Ω—É)
        try:
            for chat_id in await get_subscribers_for_api(0):
                await bot.send_message(chat_id, full_summary)
        except Exception:
            await bot.send_message(bot.config.ADMIN_USER_ID, full_summary)
        logger.info("–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç: {e}")


async def add_job_to_scheduler(scheduler: AsyncIOScheduler, bot: Bot, api: MonitoredAPI):
    job_id = f"api_check_{api.id}"
    scheduler.add_job(
        check_api, trigger=IntervalTrigger(seconds=api.check_interval),
        args=[bot, api.id], id=job_id, name=f"Check {api.name}", replace_existing=True,
        next_run_time=datetime.datetime.utcnow() + datetime.timedelta(seconds=2)
    )
    logger.info(f"–ó–∞–≤–¥–∞–Ω–Ω—è {job_id} ({api.name}) –¥–æ–¥–∞–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {api.check_interval} —Å–µ–∫.")

def remove_job_from_scheduler(scheduler: AsyncIOScheduler, api_id: int):
    job_id = f"api_check_{api_id}"
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
        logger.info(f"–ó–∞–≤–¥–∞–Ω–Ω—è {job_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")

async def setup_scheduler(scheduler: AsyncIOScheduler, bot: Bot):
    logger.info("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞...")
    active_apis = await get_all_active_apis()
    for api in active_apis:
        await add_job_to_scheduler(scheduler, bot, api)
    logger.info(f"–î–æ–¥–∞–Ω–æ {len(active_apis)} –∑–∞–≤–¥–∞–Ω—å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
    
    # –î–æ–¥–∞—î–º–æ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É
    tz_name = getattr(bot.config, 'TZ', 'UTC') or 'UTC'
    report_hour = int(getattr(bot.config, 'REPORT_HOUR', 9) or 9)
    report_minute = int(getattr(bot.config, 'REPORT_MINUTE', 0) or 0)
    scheduler.add_job(send_daily_summary, 'cron', hour=report_hour, minute=report_minute, args=[bot], timezone=tz_name)
    logger.info(f"–î–æ–¥–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –æ {report_hour:02d}:{report_minute:02d} ({tz_name}).")

    # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ ML –º–µ—Ç—Ä–∏–∫
    if settings.ML_ENABLED:
        interval_sec = max(60, int(settings.ML_COMPUTE_INTERVAL_MINUTES) * 60)

        async def compute_ml_job():
            try:
                apis = await get_all_active_apis()
                for api in apis:
                    hist = await get_recent_history_points(api.id, limit=int(settings.ML_WINDOW))
                    series = [int(h.response_time_ms) for h in hist if h.response_time_ms and h.response_time_ms > 0]
                    metrics = robust_stats(series)
                    payload = {
                        "window_size": len(series) or int(settings.ML_WINDOW),
                        "median_ms": int(metrics.get("median", 0) or 0),
                        "mad_ms": int(metrics.get("mad", 0) or 0),
                        "ewma_ms": int(metrics.get("ewma", 0) or 0),
                        "ucl_ms": int(metrics.get("ucl", 0) or 0),
                    }
                    await save_ml_metric(api.id, payload)
                logger.info("ML-–º–µ—Ç—Ä–∏–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ.")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ ML-–æ–±—á–∏—Å–ª–µ–Ω—å: {e}")

        scheduler.add_job(compute_ml_job, trigger=IntervalTrigger(seconds=interval_sec))
        logger.info(f"–î–æ–¥–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è ML-–æ–±—á–∏—Å–ª–µ–Ω—å –∫–æ–∂–Ω—ñ {interval_sec//60} —Ö–≤.")

    # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–æ–≤–≥–æ—Ç—Ä–∏–≤–∞–ª–∏–π –¥–∞—É–Ω –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ç–∏—Ö–∏—Ö –≥–æ–¥–∏–Ω
    async def down_reminder_job():
        try:
            apis = await get_all_active_apis()
            now = datetime.datetime.utcnow()
            for api in apis:
                if not api.is_up and api.incident_start_time:
                    state = await get_or_create_notification_state(api.id)
                    need = False
                    if not state.last_down_reminder_at:
                        need = True
                    else:
                        delta = now - state.last_down_reminder_at
                        need = delta.total_seconds() >= settings.DOWNTIME_REMINDER_MINUTES * 60
                    if need:
                        # –¢–∏—Ö—ñ –≥–æ–¥–∏–Ω–∏: –ø—Ä–∏–≥–ª—É—à–∏—Ç–∏ –Ω–µ-–∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è, –∞–ª–µ –¥–ª—è DOWN –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∫–æ—Ä–æ—Ç—à–µ
                        hour = (now.hour + 0) % 24
                        is_quiet = bool(settings.QUIET_HOURS_ENABLED) and (
                            settings.QUIET_START_HOUR > settings.QUIET_END_HOUR and (hour >= settings.QUIET_START_HOUR or hour < settings.QUIET_END_HOUR)
                            or settings.QUIET_START_HOUR < settings.QUIET_END_HOUR and (settings.QUIET_START_HOUR <= hour < settings.QUIET_END_HOUR)
                        )
                        text = f"‚è∞ –¢—Ä–∏–≤–∞—î –¥–∞—É–Ω '{api.name}' (ID {api.id}). –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {format_timedelta(now - api.incident_start_time)}"
                        try:
                            for chat_id in await get_subscribers_for_api(api.id):
                                await bot.send_message(chat_id, text if not is_quiet else text)
                        except Exception:
                            pass
                        await update_down_reminder_time(api.id, now)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–≥–∞–¥—É–≤–∞—á–∞: {e}")

    scheduler.add_job(down_reminder_job, trigger=IntervalTrigger(seconds=300), id="down_reminder")