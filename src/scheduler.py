# src/scheduler.py
# –õ–æ–≥—ñ–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ API —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ø–æ–≤—ñ—â–µ–Ω—å

import asyncio
import datetime
import httpx
import logging
import time
import json

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

from config import settings
from database import (MonitoredAPI, update_api_status, get_api_by_id, 
                      log_check_to_history, create_incident, end_incident, get_all_active_apis, get_stats_for_period)
from utils import format_api_status, format_timedelta

logger = logging.getLogger(__name__)

async def check_api(bot: Bot, api_id: int):
    """
    –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ API –∑ –ª–æ–≥—ñ–∫–æ—é –ø–æ—Ä–æ–≥—ñ–≤ —Ç–∞ —ñ–Ω—Ü–∏–¥–µ–Ω—Ç—ñ–≤.
    """
    api = await get_api_by_id(api_id)
    if not api or not api.is_active:
        return

    start_time = time.monotonic()
    is_currently_ok = False
    response_time_ms = -1
    status_code = None
    error_str = None
    
    try:
        async with httpx.AsyncClient(timeout=api.timeout, headers=api.headers) as client:
            request_params = {"method": api.method.upper(), "url": api.url}
            if api.request_body:
                request_params["json"] = api.request_body

            response = await client.send(client.build_request(**request_params))
            response_time_ms = int((time.monotonic() - start_time) * 1000)
            status_code = response.status_code
            
            if status_code != api.expected_status:
                raise ValueError(f"–û—á—ñ–∫—É–≤–∞–≤—Å—è —Å—Ç–∞—Ç—É—Å {api.expected_status}, –æ—Ç—Ä–∏–º–∞–Ω–æ {status_code}")

            if api.json_keys:
                json_data = response.json()
                missing_keys = [k.strip() for k in api.json_keys.split(',') if k.strip() not in json_data]
                if missing_keys:
                    raise ValueError(f"–£ JSON –≤—ñ–¥—Å—É—Ç–Ω—ñ –∫–ª—é—á—ñ: {', '.join(missing_keys)}")

            is_currently_ok = True

    except Exception as e:
        response_time_ms = int((time.monotonic() - start_time) * 1000)
        error_str = str(e)
        logger.warning(f"–ü–ï–†–ï–í–Ü–†–ö–ê –ù–ï–í–î–ê–õ–ê: API '{api.name}' (ID: {api.id}): {error_str}")

    await log_check_to_history(api_id, is_currently_ok, response_time_ms, status_code)
    
    update_data = {
        "last_checked": datetime.datetime.utcnow(),
        "last_response_time": response_time_ms,
        "last_status_code": status_code,
        "last_error": error_str
    }
    
    if is_currently_ok:
        update_data["consecutive_failures"] = 0
        update_data["consecutive_successes"] = api.consecutive_successes + 1
        
        if not api.is_up and update_data["consecutive_successes"] >= settings.RECOVERY_THRESHOLD:
            logger.info(f"–í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø: API '{api.name}' (ID: {api.id}) –¥–æ—Å—Ç—É–ø–Ω–µ {settings.RECOVERY_THRESHOLD} —Ä.")
            update_data["is_up"] = True
            
            incident_end_time = datetime.datetime.utcnow()
            await end_incident(api.id, api.incident_start_time, incident_end_time)
            
            downtime = incident_end_time - api.incident_start_time
            requests_during_downtime = api.consecutive_failures + update_data["consecutive_successes"]
            
            recovery_message = (
                f"‚úÖ <b>–í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø: {api.name}</b>\n\n"
                f"–°–µ—Ä–≤—ñ—Å —Å—Ç–∞–±—ñ–ª—å–Ω–æ –ø—Ä–∞—Ü—é—î.\n\n"
                f"<b>–î–µ—Ç–∞–ª—ñ —ñ–Ω—Ü–∏–¥–µ–Ω—Ç—É:</b>\n"
                f"  - –ü–æ—á–∞—Ç–æ–∫: <code>{api.incident_start_time.strftime('%Y-%m-%d %H:%M:%S')}</code>\n"
                f"  - –ö—ñ–Ω–µ—Ü—å: <code>{incident_end_time.strftime('%Y-%m-%d %H:%M:%S')}</code>\n"
                f"  - –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: <b>{format_timedelta(downtime)}</b>\n"
                f"  - –ù–µ–≤–¥–∞–ª–∏—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫: {api.consecutive_failures}"
            )
            await bot.send_message(bot.config.ADMIN_USER_ID, recovery_message)
            update_data["incident_start_time"] = None
        
    else: # –ù–µ–≤–¥–∞–ª–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞
        update_data["consecutive_successes"] = 0
        update_data["consecutive_failures"] = api.consecutive_failures + 1
        
        if api.is_up and update_data["consecutive_failures"] >= settings.FAILURE_THRESHOLD:
            logger.error(f"–ü–ê–î–Ü–ù–ù–Ø: API '{api.name}' (ID: {api.id}) –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î {settings.FAILURE_THRESHOLD} —Ä.")
            update_data["is_up"] = False
            # –ß–∞—Å –ø–æ—á–∞—Ç–∫—É —ñ–Ω—Ü–∏–¥–µ–Ω—Ç—É - —Ü–µ —á–∞—Å –ø–µ—Ä—à–æ—ó –Ω–µ–≤–¥–∞–ª–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            update_data["incident_start_time"] = datetime.datetime.utcnow() - datetime.timedelta(seconds=api.check_interval * (update_data["consecutive_failures"] - 1))
            await create_incident(api.id, update_data["incident_start_time"])
            
            await bot.send_message(
                chat_id=bot.config.ADMIN_USER_ID,
                text=f"üî¥ <b>–ü–ê–î–Ü–ù–ù–Ø: {api.name}</b>\n\n{format_api_status(api, update_data)}"
            )

    await update_api_status(api.id, update_data)

async def send_daily_summary(bot: Bot):
    """–ù–∞–¥—Å–∏–ª–∞—î —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –≤—Å—ñ–º –∞–∫—Ç–∏–≤–Ω–∏–º –º–æ–Ω—ñ—Ç–æ—Ä–∞–º."""
    logger.info("–ü–æ—á–∏–Ω–∞—é —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É...")
    active_apis = await get_all_active_apis()
    if not active_apis:
        logger.info("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –º–æ–Ω—ñ—Ç–æ—Ä—ñ–≤ –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –∑–≤—ñ—Ç—É.")
        return

    summary_header = f"‚òÄÔ∏è <b>–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ {datetime.date.today().strftime('%d-%m-%Y')}</b>\n\n"
    summary_parts = []

    for api in active_apis:
        status_icon = "üü¢" if api.is_up else "üî¥"
        stats = await get_stats_for_period(api.id, "24h")
        
        part = (
            f"<b>{status_icon} {api.name}</b> (ID: {api.id})\n"
            f"  - –ê–ø—Ç–∞–π–º: {stats.get('uptime_percent', 100):.2f}%\n"
            f"  - –ü–∞–¥—ñ–Ω—å: {stats.get('incident_count', 0)}\n"
            f"  - –ß–∞—Å –ø—Ä–æ—Å—Ç–æ—é: {format_timedelta(stats.get('total_downtime', datetime.timedelta()))}\n"
            f"  - –°–µ—Ä. –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {int(stats.get('avg_response_time_ms') or 0)} –º—Å\n"
        )
        summary_parts.append(part)

    full_summary = summary_header + "\n".join(summary_parts)
    
    try:
        await bot.send_message(bot.config.ADMIN_USER_ID, full_summary)
        logger.info("–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.")
    except Exception as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç: {e}")


async def add_job_to_scheduler(scheduler: AsyncIOScheduler, bot: Bot, api: MonitoredAPI):
    job_id = f"api_check_{api.id}"
    scheduler.add_job(
        check_api, trigger=IntervalTrigger(seconds=api.check_interval),
        args=[bot, api.id], id=job_id, name=f"Check {api.name}", replace_existing=True,
        next_run_time=datetime.datetime.now() + datetime.timedelta(seconds=2)
    )
    logger.info(f"–ó–∞–≤–¥–∞–Ω–Ω—è {job_id} ({api.name}) –¥–æ–¥–∞–Ω–æ/–æ–Ω–æ–≤–ª–µ–Ω–æ –∑ —ñ–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {api.check_interval} —Å–µ–∫.")

def remove_job_from_scheduler(scheduler: AsyncIOScheduler, api_id: int):
    job_id = f"api_check_{api_id}"
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
        logger.info(f"–ó–∞–≤–¥–∞–Ω–Ω—è {job_id} –≤–∏–¥–∞–ª–µ–Ω–æ.")

async def setup_scheduler(scheduler: AsyncIOScheduler, bot: Bot):
    logger.info("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞...")
    active_apis = await get_all_active_apis()
    for api in active_apis:
        await add_job_to_scheduler(scheduler, bot, api)
    logger.info(f"–î–æ–¥–∞–Ω–æ {len(active_apis)} –∑–∞–≤–¥–∞–Ω—å –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")
    
    # –î–æ–¥–∞—î–º–æ —â–æ–¥–µ–Ω–Ω—É —Ä–æ–∑—Å–∏–ª–∫—É
    scheduler.add_job(send_daily_summary, 'cron', hour=9, minute=0, args=[bot], timezone='Europe/Kiev')
    logger.info("–î–æ–¥–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —â–æ–¥–µ–Ω–Ω–æ—ó —Ä–æ–∑—Å–∏–ª–∫–∏ –æ 9:00.")